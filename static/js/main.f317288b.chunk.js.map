{"version":3,"sources":["components/Search.js","components/Daily.js","components/HourlyItem.js","components/Hourly.js","components/WeatherInfo.js","App.js","index.js"],"names":["Search","setSearch","search","daily","allData","useState","location","setLocation","temperature","setTemperature","weatherIcon","setWeatherIcon","useEffect","obj","today","Date","cDate","getTime","getDate","cTemp","Math","round","main","temp","wIcon","weather","icon","getCurrentWeather","className","src","alt","onSubmit","e","preventDefault","searchWeather","type","placeholder","name","onChange","target","value","Daily","data","day","monthName","date","clickHandler","id","clicked","setClicked","maxTemperature","setMaxTemperature","lowTemperature","setLowTemperature","setwIcon","classes","setClasses","maxTemp","temp_max","index","length","max","findMaxTemp","lowTemp","temp_min","low","findLowTemp","n","getIcon","onClick","HourlyItem","time","hour","timeFormated","dt_txt","split","pop","substring","formatTime","feels_like","wind","speed","Hourly","hourlyData","map","dt","hourlyFunction","WeatherInfo","dd","mm","monthNames","days","getDay","getMonth","getCurrentDate","Object","keys","key","DailyWeather","App","setDaily","setAll","dateBins","groupByDate","a","i","getWeather","fetch","mode","response","status","Error","json","find","reports","list","setterData","report","reportDate","push","setterDaily","alert","all","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f317288b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { FaSearch } from 'react-icons/fa';\n\nconst Search = ({ setSearch, search, daily, allData }) => {\n  const [location, setLocation] = useState();\n  const [temperature, setTemperature] = useState();\n  const [weatherIcon, setWeatherIcon] = useState('');\n\n  const searchWeather = (e) => {\n    e.preventDefault();\n    setSearch(location);\n  };\n\n  const getCurrentWeather = () => {\n    if (daily) {\n      const obj = daily;\n      const today = new Date();\n      let dayC = new Date(today.getTime());\n      let cDate = dayC.getDate();\n\n      let cTemp = Math.round(obj[cDate][0].main.temp);\n      let wIcon = obj[cDate][0].weather[0].icon;\n\n      setTemperature(cTemp);\n      setWeatherIcon(wIcon);\n    }\n  };\n\n  useEffect(() => {\n    getCurrentWeather();\n  }, [daily, allData]);\n\n  return (\n    <div className=\"search\">\n      <div className=\"current-city\">\n        <img\n          className=\"currentWeatherIcon\"\n          src={`http://openweathermap.org/img/wn/${weatherIcon}@2x.png`}\n          alt=\"weather\"\n        ></img>\n        <h4>\n          {temperature}Â°C {search}\n        </h4>\n      </div>\n      <div className=\"searchBox\">\n        <form onSubmit={(e) => searchWeather(e)}>\n          <input\n            className=\"searchInput\"\n            type=\"text\"\n            placeholder=\"Search location..\"\n            name=\"search\"\n            onChange={(e) => setLocation(e.target.value)}\n          ></input>\n          <button className=\"searchButton\" type=\"submit\">\n            <FaSearch className=\"sIcon\" />\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Search;\n","import React, { useState, useEffect } from 'react';\n\nconst Daily = ({\n  data,\n  day,\n  monthName,\n  date,\n  clickHandler,\n  id,\n  clicked,\n  setClicked,\n}) => {\n  const [maxTemperature, setMaxTemperature] = useState();\n  const [lowTemperature, setLowTemperature] = useState();\n  const [wIcon, setwIcon] = useState();\n  const [classes, setClasses] = useState('daily-item');\n\n  const findMaxTemp = () => {\n    if (data) {\n      let maxTemp = data[0].main.temp_max;\n\n      for (let index = 0; index < data.length; index++) {\n        let max = data[index].main.temp_max;\n        if (maxTemp <= max) {\n          maxTemp = max;\n        }\n      }\n      setMaxTemperature(Math.round(maxTemp));\n    }\n  };\n\n  const checkClicked = () => {\n    if (id === clicked) {\n      setClasses('daily-item active');\n    } else {\n      setClasses('daily-item');\n    }\n  };\n\n  const findLowTemp = () => {\n    if (data) {\n      let lowTemp = data[0].main.temp_min;\n      for (let index = 0; index < data.length; index++) {\n        let low = data[index].main.temp_min;\n        if (lowTemp >= low) {\n          lowTemp = low;\n        }\n      }\n      setLowTemperature(Math.round(lowTemp));\n    }\n  };\n\n  const getIcon = () => {\n    if (data.length > 1) {\n      const n = Math.round(data.length / 2 - 1);\n      const icon = data[n].weather[0].icon;\n      setwIcon(icon);\n    } else {\n      const icon = data[0].weather[0].icon;\n      setwIcon(icon);\n    }\n  };\n\n  useEffect(() => {\n    findMaxTemp();\n    findLowTemp();\n    getIcon();\n    setClicked(0);\n  }, [data]);\n\n  useEffect(() => {\n    checkClicked();\n  }, [clicked]);\n\n  return (\n    <>\n      <div\n        className={classes}\n        onClick={() => {\n          clickHandler(id);\n        }}\n      >\n        <div className=\"row\">\n          <div className=\"headerDaily\">\n            <img\n              className=\"dailyIcon\"\n              src={`http://openweathermap.org/img/wn/${wIcon}@2x.png`}\n              alt=\"weather\"\n            ></img>\n            <h4 className=\"day\">{day}</h4>\n          </div>\n          <h4>{maxTemperature}Â°C</h4>\n        </div>\n        <div className=\"row\">\n          <p>\n            {date}. {monthName}\n          </p>\n          <p>{lowTemperature}Â°C</p>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Daily;\n","import React from 'react';\n\nconst HourlyItem = ({ hour }) => {\n  let time;\n  const formatTime = () => {\n    let timeFormated = hour.dt_txt.split(' ').pop();\n    time = timeFormated.substring(0, timeFormated.length - 3);\n  };\n  formatTime();\n  return (\n    <div className=\"hour\">\n      <h4>{time}</h4>\n      <div>\n        <img\n          alt=\"icon\"\n          className=\"hourlyIcon\"\n          src={`http://openweathermap.org/img/wn/${hour.weather[0].icon}@2x.png`}\n        />\n        <h4>{Math.round(hour.main.temp)}Â°C</h4>\n      </div>\n      <h4>RealFeelÂ®: {Math.round(hour.main.feels_like)}Â°C </h4>\n      <h4>{hour.weather[0].main}</h4>\n      <h4>Wind speed: {Math.round(hour.wind.speed * 3.6)} km/h</h4>\n    </div>\n  );\n};\n\nexport default HourlyItem;\n","import React from 'react';\nimport HourlyItem from './HourlyItem';\n\nconst Hourly = ({ hourlyData }) => {\n  const hourlyFunction = () => {\n    if (hourlyData) {\n      return hourlyData.map((hour) => {\n        return <HourlyItem hour={hour} key={hour.dt} />;\n      });\n    }\n  };\n  return <div className=\"hourly\">{hourlyFunction()}</div>;\n};\n\nexport default Hourly;\n","import React, { useState } from 'react';\nimport Daily from './Daily';\nimport Hourly from './Hourly';\n\nconst WeatherInfo = ({ daily, allData }) => {\n  const [clicked, setClicked] = useState(0);\n  const monthNames = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n\n  const days = [\n    'Sunday',\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n    'Sunday',\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n  ];\n  let dd;\n  let mm;\n  let date;\n  const getCurrentDate = () => {\n    let today = new Date();\n    dd = today.getDay();\n    mm = today.getMonth();\n    date = today.getDate();\n  };\n  getCurrentDate();\n  let hourlyData;\n  const getHourlyData = () => {\n    hourlyData = daily[date + clicked];\n  };\n\n  const clickHandler = (id) => {\n    setClicked(id);\n  };\n\n  const DailyWeather = () => {\n    if (daily) {\n      getHourlyData();\n      return Object.keys(daily).map((key, index) => {\n        return (\n          <Daily\n            clickHandler={clickHandler}\n            data={daily[key]}\n            key={index}\n            id={index}\n            day={days[dd + index]}\n            monthName={monthNames[mm]}\n            date={date + index}\n            clicked={clicked}\n            setClicked={setClicked}\n          />\n        );\n      });\n    }\n  };\n\n  return (\n    <div className=\"dailyContainer\">\n      <div className=\"daily\">\n        <div className=\"daily_Weather\">{DailyWeather()}</div>\n      </div>\n      <Hourly hourlyData={hourlyData} />\n    </div>\n  );\n};\n\nexport default WeatherInfo;\n","import './App.css';\nimport React, { useEffect, useState } from 'react';\nimport Search from './components/Search';\nimport WeatherInfo from './components/WeatherInfo';\n\nfunction App() {\n  const [search, setSearch] = useState('Ljubljana');\n  const [daily, setDaily] = useState();\n  const [allData, setAll] = useState();\n\n  const dateBins = {};\n  const nBins = 6;\n  const apiKey = 'af533ff5de5f96b4a9d160f95a8c26ae';\n  // function to group by day, as I have 3hour timestamps of weather\n  const groupByDate = async () => {\n    const today = new Date();\n    const day = 60 * 60 * 24 * 1000;\n    for (let i = 0; i < nBins; i++) {\n      const date = new Date(today.getTime() + i * day);\n      dateBins[date.getDate()] = [];\n    }\n  };\n\n  useEffect(() => {\n    getWeather();\n  }, [search]);\n\n  const getWeather = async () => {\n    groupByDate();\n    try {\n      const response = await fetch(\n        `https://api.openweathermap.org/data/2.5/forecast?q=${search}&units=metric&appid=${apiKey}`,\n        { mode: 'cors' }\n      );\n      if (response.status >= 400 && response.status < 600) {\n        throw Error('Coudnt find the city');\n      }\n      const find = await response.json();\n\n      const reports = find.list;\n\n      setterData(find);\n      for (const report of reports) {\n        const reportDate = new Date(report.dt * 1000).getDate();\n        dateBins[reportDate].push(report);\n      }\n      setterDaily(dateBins);\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  const setterData = (all) => {\n    setAll(all);\n  };\n  const setterDaily = (daily) => {\n    setDaily(daily);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <Search\n          setSearch={setSearch}\n          allData={allData}\n          search={search}\n          daily={daily}\n        />\n        <WeatherInfo allData={allData} daily={daily} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}